{"version":3,"sources":["pages/Home.js","components/Navbar.js","components/Events.js","pages/Dashboard.js","pages/Event.js","components/SelectCheckIn.js","pages/NewUser.js","pages/ReturningUser.js","pages/AdminLogin.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","useState","useEffect","className","to","Navbar","role","aria-label","Events","events","setEvents","a","console","log","fetch","res","json","resJson","alert","fetchData","map","event","index","key","eventName","rsvps","length","id","Dashboard","Event","setEvent","isError","setIsError","rsvpRef","useRef","match","params","eventLocation","onClick","current","classList","remove","ref","rsvp","name","firstName","lastName","email","SelectCheckIn","isLoading","setIsLoading","fetchCheckIn","message","NewUser","ReturningUser","AdminLogin","routes","path","Component","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUA+CeA,G,MAxCF,SAACC,GAAW,IAAD,EACcC,oBAAS,GADvB,gCAGUA,mBAAS,OAHnB,6BAqBpB,OALAC,qBAAU,cAGP,IAGC,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,gBACX,oCACA,yEAEJ,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMC,GAAI,QAAV,OACA,kBAAC,IAAD,CAAMA,GAAI,cAAV,cAEJ,yBAAKD,UAAU,gBACX,kBAAC,IAAD,CAAMC,GAAI,UAAV,cCdLC,G,MArBA,SAACL,GAEZ,OACI,yBAAKG,UAAU,eACX,yBAAKA,UAAU,SAASG,KAAK,aAAaC,aAAW,mBACjD,yBAAKJ,UAAU,gBACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAKJ,yBAAKD,UAAU,kBACX,kBAAC,IAAD,CAAMA,UAAU,wBAAwBC,GAAG,QAA3C,YACA,kBAAC,IAAD,CAAMD,UAAU,gBAAgBC,GAAG,cAAnC,kBACA,kBAAC,IAAD,CAAMD,UAAU,wBAAwBC,GAAG,cAA3C,kB,wBC6BLI,EA1CA,SAACR,GAAW,IAAD,EACYC,oBAAS,GADrB,gCAEMA,mBAAS,KAFf,mBAEfQ,EAFe,KAEPC,EAFO,OAGQT,oBAAS,GAHjB,yEAKtB,8BAAAU,EAAA,6DACIC,QAAQC,IAAIb,GADhB,kBAG0Bc,MAAM,oCAHhC,cAGcC,EAHd,gBAI8BA,EAAIC,OAJlC,OAIcC,EAJd,OAKQP,EAAUO,GALlB,kDAOQC,MAAM,EAAD,IAPb,2DALsB,sBAqBtB,OALAhB,qBAAU,YAhBY,mCAiBlBiB,KAED,IAGC,yBAAKhB,UAAU,wBACX,yBAAKA,UAAU,eACX,4BACKM,EAAOW,KAAI,SAACC,EAAOC,GAChB,OACI,wBAAIC,IAAKD,GACL,yBAAKC,IAAKD,EAAOnB,UAAU,SACvB,4BAAKkB,EAAMG,WACX,uCAAaH,EAAMI,MAAMC,QACzB,kBAAC,IAAD,CAAMtB,GAAE,iBAAYiB,EAAMM,KAA1B,oBCArBC,EAhCG,SAAC5B,GAqBf,OALAE,qBAAU,cAGP,IAGC,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,UC8BL0B,G,MArDD,SAAC7B,GAAW,IAAD,EACaC,oBAAS,GADtB,gCAEKA,mBAAS,KAFd,mBAEdoB,EAFc,KAEPS,EAFO,OAGS7B,mBAAS,MAHlB,mBAGd8B,EAHc,KAGLC,EAHK,KAKfC,EAAUC,iBAAO,MALF,4CAOrB,8BAAAvB,EAAA,+EAE0BG,MAAM,oCAAD,OAAqCd,EAAMmC,MAAMC,OAAOT,KAFvF,cAEcZ,EAFd,gBAG8BA,EAAIC,OAHlC,OAGcC,EAHd,OAIQa,EAASb,GAJjB,kDAMQe,EAAW,EAAD,IANlB,2DAPqB,sBA0BrB,OALA9B,qBAAU,YArBW,mCAsBjBiB,KAED,IAGC,yBAAKhB,UAAU,wBACV4B,GAAWV,EAAMD,KAAI,SAACC,EAAOC,GAC1B,OACI,yBAAKC,IAAKD,EAAOnB,UAAU,SACvB,4BAAKkB,EAAMG,WACX,uCAAaH,EAAMI,MAAMC,QACzB,2BAAIL,EAAMgB,eAEV,4BAAQlC,UAAU,oBAAoBmC,QAAS,WAjB/DL,EAAQM,QAAQC,UAAUC,OAAO,YAiBjB,cACA,yBAAKC,IAAKT,EAAS9B,UAAU,gBACxBkB,EAAMI,MAAML,KAAI,SAACuB,EAAMrB,GACpB,OACI,yBAAKC,IAAKD,GACN,6BAAMqB,EAAKC,KAAKC,UAAhB,IAA4BF,EAAKC,KAAKE,UACtC,6BAAMH,EAAKI,mBCCpCC,EA5CO,SAAChD,GAAW,IAAD,EACKC,oBAAS,GADd,mBACtBgD,EADsB,KACXC,EADW,OAEHjD,mBAAS,MAFN,mBAEtBoB,EAFsB,KAEfS,EAFe,iDAO7B,8BAAAnB,EAAA,+EAE0BG,MAAM,gDAFhC,cAEcC,EAFd,gBAG8BA,EAAIC,OAHlC,OAGcC,EAHd,OAKQL,QAAQC,IAAII,GACZa,EAASb,GACTiC,GAAa,GAPrB,kDASQtC,QAAQC,IAAR,MACAqC,GAAa,GAVrB,2DAP6B,sBA4B7B,OALAhD,qBAAU,YAvBmB,mCAwBzBiD,KAED,IAGC,yBAAKhD,UAAU,wBACX,6DACC8C,EAAY,2CACR5B,EACqB,aAAlBA,EAAM+B,QAAyB,oDAC3B,yBAAKjD,UAAU,iBACVkB,EAAMG,WAHV,sDCCV6B,EA9BC,SAACrD,GAAW,IAAD,EACWC,oBAAS,GADpB,gCAEGA,mBAAS,KAFZ,gCAGOA,mBAAS,OAHhB,6BAqBvB,OALAC,qBAAU,cAGP,IAGC,yBAAKC,UAAU,wBACX,6CAEA,kBAAC,EAAD,QCcGmD,EAxCO,SAACtD,GAAW,IAAD,EACKC,oBAAS,GADd,gCAGCA,mBAAS,OAHV,6BAqB7B,OALAC,qBAAU,cAGP,IAGC,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qBACX,6CACA,uDAEJ,yBAAKA,UAAU,yBCYhBoD,EAxCI,SAACvD,GAAW,IAAD,EACQC,oBAAS,GADjB,gCAGIA,mBAAS,OAHb,6BAqB1B,OALAC,qBAAU,cAGP,IAGC,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,sBACX,6CACA,oDAEJ,yBAAKA,UAAU,0BCtBzBqD,G,MAAS,CACd,CAAEC,KAAM,IAAKb,KAAM,OAAQc,UAAW3D,GACtC,CAAE0D,KAAM,aAAcb,KAAM,YAAac,UAAW9B,GACpD,CAAE6B,KAAM,aAAcb,KAAM,QAASc,UAAW7B,GAChD,CAAE4B,KAAM,OAAQb,KAAM,MAAOc,UAAWL,GACxC,CAAEI,KAAM,aAAcb,KAAM,YAAac,UAAWJ,GACpD,CAAEG,KAAM,SAAUb,KAAM,QAASc,UAAWH,KAoB9BI,MAff,WACE,OACE,yBAAKxD,UAAU,OACjB,yBAAKA,UAAU,iBACd,kBAAC,EAAD,MACA,0BAAMG,KAAK,OAAOH,UAAU,QAC1BqD,EAAOpC,KAAI,gBAAGqC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAT,OACX,kBAAC,IAAD,CAAOnC,IAAKkC,EAAMG,OAAK,EAACH,KAAMA,EAAMI,UAAWH,WCnBhCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCXN+B,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dcd97b7c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nimport '../sass/Home.scss';\n// import '../sass/Home-media-queries.scss';\n\nconst Home = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    // const [event, setEvent] = useState([]);\n    const [isError, setIsError] = useState(null);\n\n    // async function fetchData() {\n    //     try {\n    //         const res = await fetch(`http://localhost:4000/api/events/${props.match.params.id}`);\n    //         const resJson = await res.json();\n    //         setEvent(resJson);\n    //     } catch(error) {\n    //         setIsError(error);\n    //         alert(error);\n    //     }\n    // }\n\n    useEffect(() => {\n        // fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <div className=\"home\">\n                <div className=\"home-headers\">\n                    <h1>VRMS</h1>\n                    <h2>Volunteer Relationship Management System</h2>\n                </div>\n                <div className=\"home-buttons\">\n                    <Link to={'/new'}>New</Link>\n                    <Link to={'/returning'}>Returning</Link>\n                </div>\n                <div className=\"login-button\">\n                    <Link to={'/login'}>Login</Link>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Home;\n    ","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport '../sass/Navbar.scss';\n\nconst Navbar = (props) => {\n\n    return (\n        <div className=\"nav-wrapper\">\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-brand\">\n                    <Link to=\"/\">\n                        Home\n                    </Link>\n                </div>\n\n                <div className=\"navbar-buttons\">\n                    <Link className=\"navbar-button primary\" to=\"/new\">New User</Link>\n                    <Link className=\"navbar-button\" to=\"/returning\">Returning User</Link>\n                    <Link className=\"navbar-button primary\" to=\"/dashboard\">Dashboard</Link>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Navbar;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n// import '../sass/EventsContainer.scss';\n// import '../sass/EventsContainer-media-queries.scss';\n\nconst Events = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [events, setEvents] = useState([]);\n    const [isError, setIsError] = useState(false);\n\n    async function fetchData() {\n        console.log(props)\n        try {\n            const res = await fetch(\"http://localhost:4000/api/events\");\n            const resJson = await res.json();\n            setEvents(resJson);\n        } catch(error) {\n            alert(error);\n        }\n    }\n\n    useEffect(() => {\n        fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <div className=\"events-list\">\n                <ul>\n                    {events.map((event, index) => {\n                        return (\n                            <li key={index}>\n                                <div key={index} className=\"event\">\n                                    <h4>{event.eventName}</h4>\n                                    <h5>RSVP's: {event.rsvps.length}</h5>\n                                    <Link to={`/event/${event.id}`}>Details</Link>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n};\n\nexport default Events;\n    ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Events from '../components/Events';\n\nconst Dashboard = (props) => {\n    // const [isLoading, setIsLoading] = useState(false);\n    // const [event, setEvent] = useState([]);\n    // const [isError, setIsError] = useState(null);\n\n    // async function fetchData() {\n    //     try {\n    //         const res = await fetch(`http://localhost:4000/api/events/${props.match.params.id}`);\n    //         const resJson = await res.json();\n    //         setEvent(resJson);\n    //     } catch(error) {\n    //         setIsError(error);\n    //         alert(error);\n    //     }\n    // }\n\n    useEffect(() => {\n        // fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <div className=\"dashboard\">\n                <div className=\"events\">\n                    <Events />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Dashboard;\n    ","import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nimport '../sass/Event.scss';\n// import '../sass/Event-media-queries.scss';\n\nconst Event = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [event, setEvent] = useState([]);\n    const [isError, setIsError] = useState(null);\n\n    const rsvpRef = useRef(null);\n\n    async function fetchData() {\n        try {\n            const res = await fetch(`http://localhost:4000/api/events/${props.match.params.id}`);\n            const resJson = await res.json();\n            setEvent(resJson);\n        } catch(error) {\n            setIsError(error);\n        }\n    }\n\n    function showRsvps() {\n        rsvpRef.current.classList.remove('hidden');\n    }\n\n    useEffect(() => {\n        fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            {isError || event.map((event, index) => {\n                return (\n                    <div key={index} className=\"event\">\n                        <h4>{event.eventName}</h4>\n                        <h5>RSVP's: {event.rsvps.length}</h5>\n                        <p>{event.eventLocation}</p>\n\n                        <button className=\"show-rsvps-button\" onClick={() => showRsvps()}>Show RSVPs</button>\n                        <div ref={rsvpRef} className=\"rsvps hidden\">\n                            {event.rsvps.map((rsvp, index) => {\n                                return (\n                                    <div key={index}>\n                                        <div>{rsvp.name.firstName} {rsvp.name.lastName}</div>\n                                        <div>{rsvp.email}</div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n};\n\nexport default Event;\n    ","import React, { useState, useEffect } from 'react';\n\n// import '../sass/SelectCheckIn.scss';\n// import '../sass/SelectCheckIn-media-queries.scss';\n\nconst SelectCheckIn = (props) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [event, setEvent] = useState(null);\n    // const [isError, setIsError] = useState(null);\n\n\n\n    async function fetchCheckIn() {\n        try {\n            const res = await fetch(\"http://localhost:4000/api/events/checkInTrue\");\n            const resJson = await res.json();\n            // const resJson = await res.text();\n            console.log(resJson);\n            setEvent(resJson);\n            setIsLoading(false);\n        } catch(error) {\n            console.log(error);\n            setIsLoading(false);\n            // setIsError(error);\n            // alert(error);\n        }\n    }\n\n    useEffect(() => {\n        fetchCheckIn();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <h3>Events to check-in for below:</h3>\n            {isLoading ? <div>Loading...</div> : (\n                !event ? <div>Check back later...</div> : (\n                    event.message === \"No match\" ? <div>Check back later...</div> : (\n                        <div className=\"checkin-event\">\n                            {event.eventName}\n                        </div>\n                    )\n                )\n            )}\n        </div>\n    )\n};\n\nexport default SelectCheckIn;\n    ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport SelectCheckIn from '../components/SelectCheckIn';\n\n// import '../sass/EventContainer.scss';\n// import '../sass/EventContainer-media-queries.scss';\n\nconst NewUser = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [event, setEvent] = useState([]);\n    const [isError, setIsError] = useState(null);\n\n    // async function fetchData() {\n    //     try {\n    //         const res = await fetch(`http://localhost:4000/api/events/${props.match.params.id}`);\n    //         const resJson = await res.json();\n    //         setEvent(resJson);\n    //     } catch(error) {\n    //         setIsError(error);\n    //         alert(error);\n    //     }\n    // }\n\n    useEffect(() => {\n        // fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <h3>New User Page</h3>\n\n            <SelectCheckIn />\n        </div>\n    )\n};\n\nexport default NewUser; ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n// import '../sass/HomeContainer.scss';\n// import '../sass/HomeContainer-media-queries.scss';\n\nconst ReturningUser = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    // const [event, setEvent] = useState([]);\n    const [isError, setIsError] = useState(null);\n\n    // async function fetchData() {\n    //     try {\n    //         const res = await fetch(`http://localhost:4000/api/events/${props.match.params.id}`);\n    //         const resJson = await res.json();\n    //         setEvent(resJson);\n    //     } catch(error) {\n    //         setIsError(error);\n    //         alert(error);\n    //     }\n    // }\n\n    useEffect(() => {\n        // fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <div className=\"returning\">\n                <div className=\"returning-headers\">\n                    <h3>Welcome Back!</h3>\n                    <h4>We're happy to see you</h4>\n                </div>\n                <div className=\"returning-buttons\">\n                    {/* <Link to={'/new'}>New</Link>\n                    <Link to={'/returning'}>Returning</Link>\n                </div>\n                <div className=\"login-button\">\n                    <Link to={'/login'}>Login</Link> */}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default ReturningUser;\n    ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n// import '../sass/HomeContainer.scss';\n// import '../sass/HomeContainer-media-queries.scss';\n\nconst AdminLogin = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    // const [event, setEvent] = useState([]);\n    const [isError, setIsError] = useState(null);\n\n    // async function fetchData() {\n    //     try {\n    //         const res = await fetch(`http://localhost:4000/api/events/${props.match.params.id}`);\n    //         const resJson = await res.json();\n    //         setEvent(resJson);\n    //     } catch(error) {\n    //         setIsError(error);\n    //         alert(error);\n    //     }\n    // }\n\n    useEffect(() => {\n        // fetchData();\n\n    }, []);\n\n    return (\n        <div className=\"flexcenter-container\">\n            <div className=\"adminlogin\">\n                <div className=\"adminlogin-headers\">\n                    <h3>Welcome Back!</h3>\n                    <h4>Please login below.</h4>\n                </div>\n                <div className=\"adminlogin-buttons\">\n                    {/* <Link to={'/new'}>New</Link>\n                    <Link to={'/returning'}>Returning</Link>\n                </div>\n                <div className=\"login-button\">\n                    <Link to={'/login'}>Login</Link> */}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default AdminLogin;\n    ","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Navbar from './components/Navbar';\nimport Dashboard from './pages/Dashboard';\nimport Event from './pages/Event';\nimport NewUser from './pages/NewUser';\nimport ReturningUser from './pages/ReturningUser';\nimport AdminLogin from './pages/AdminLogin';\n\nimport './App.scss';\n\nconst routes = [\n\t{ path: '/', name: 'home', Component: Home },\n\t{ path: '/dashboard', name: 'dashboard', Component: Dashboard },\n\t{ path: '/event/:id', name: 'event', Component: Event },\n\t{ path: '/new', name: 'new', Component: NewUser },\n\t{ path: '/returning', name: 'returning', Component: ReturningUser },\n\t{ path: '/login', name: 'login', Component: AdminLogin }\n];\n\n// { path: '/events', name: 'events', Component: Events },\n\nfunction App() {\n  return (\n    <div className=\"app\">\n\t\t<div className=\"app-container\">\n\t\t\t<Navbar />\n\t\t\t<main role=\"main\" className=\"main\">\n\t\t\t\t{routes.map(({ path, Component }) => (\n\t\t\t\t\t<Route key={path} exact path={path} component={Component} />\n\t\t\t\t))}\n\t\t\t</main>\n\t\t</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}